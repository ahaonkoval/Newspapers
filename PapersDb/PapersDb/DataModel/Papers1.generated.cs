//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : Papers
	/// Data Source    : MO-726-001
	/// Server Version : 13.00.4422
	/// </summary>
	public partial class PapersDB : LinqToDB.Data.DataConnection
	{
		public ITable<Access> Accesses { get { return this.GetTable<Access>(); } }
		public ITable<Cell>   Cells    { get { return this.GetTable<Cell>(); } }
		public ITable<Otd>    Otds     { get { return this.GetTable<Otd>(); } }
		public ITable<Page>   Pages    { get { return this.GetTable<Page>(); } }
		public ITable<Token>  Tokens   { get { return this.GetTable<Token>(); } }
		public ITable<User>   Users    { get { return this.GetTable<User>(); } }
		public ITable<VUsers> VUsers   { get { return this.GetTable<VUsers>(); } }

		public PapersDB()
		{
			InitDataContext();
		}

		public PapersDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="access")]
	public partial class Access
	{
		[Column("access_id"), PrimaryKey,  NotNull] public long   AccessId { get; set; } // bigint
		[Column("name"),         Nullable         ] public string Name     { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK__users__access_id__18EBB532_BackReference
		/// </summary>
		[Association(ThisKey="AccessId", OtherKey="AccessId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<User> usersid18EBB { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="cells")]
	public partial class Cell
	{
		[Column("global_cell_id"),            PrimaryKey,  Identity] public long     GlobalCellId           { get; set; } // bigint
		[Column("page_id"),                   NotNull              ] public long     PageId                 { get; set; } // bigint
		[Column("page_position"),                Nullable          ] public int?     PagePosition           { get; set; } // int
		[Column("otd_id"),                       Nullable          ] public long?    OtdId                  { get; set; } // bigint
		[Column("depart"),                       Nullable          ] public string   Depart                 { get; set; } // nvarchar(50)
		[Column("artlst"),                       Nullable          ] public string   Artlst                 { get; set; } // nvarchar(50)
		[Column("unit"),                         Nullable          ] public string   Unit                   { get; set; } // nvarchar(50)
		[Column("number"),                       Nullable          ] public string   Number                 { get; set; } // nvarchar(50)
		[Column("short_name"),                   Nullable          ] public string   ShortName              { get; set; } // nvarchar(50)
		[Column("producer"),                     Nullable          ] public string   Producer               { get; set; } // nvarchar(50)
		[Column("madein"),                       Nullable          ] public string   Madein                 { get; set; } // nvarchar(50)
		[Column("price_buy"),                    Nullable          ] public decimal? PriceBuy               { get; set; } // decimal(18, 2)
		[Column("price_before_act"),             Nullable          ] public decimal? PriceBeforeAct         { get; set; } // decimal(18, 2)
		[Column("price_act"),                    Nullable          ] public decimal? PriceAct               { get; set; } // decimal(18, 2)
		[Column("price_after_act"),              Nullable          ] public decimal? PriceAfterAct          { get; set; } // decimal(18, 2)
		[Column("price_start"),                  Nullable          ] public decimal? PriceStart             { get; set; } // decimal(18, 2)
		[Column("profit_procent"),               Nullable          ] public decimal? ProfitProcent          { get; set; } // decimal(18, 2)
		[Column("margin"),                       Nullable          ] public decimal? Margin                 { get; set; } // decimal(18, 2)
		[Column("diff_price"),                   Nullable          ] public decimal? DiffPrice              { get; set; } // decimal(18, 2)
		[Column("forecast_profit"),              Nullable          ] public decimal? ForecastProfit         { get; set; } // decimal(18, 2)
		[Column("forecast_profit_act"),          Nullable          ] public decimal? ForecastProfitAct      { get; set; } // decimal(18, 2)
		[Column("specifiacations"),              Nullable          ] public string   Specifiacations        { get; set; } // nvarchar(255)
		[Column("garant"),                       Nullable          ] public string   Garant                 { get; set; } // nvarchar(255)
		[Column("advantage"),                    Nullable          ] public string   Advantage              { get; set; } // nvarchar(255)
		[Column("inventory"),                    Nullable          ] public string   Inventory              { get; set; } // nvarchar(255)
		[Column("competitors"),                  Nullable          ] public string   Competitors            { get; set; } // nvarchar(50)
		[Column("competitive_product"),          Nullable          ] public string   CompetitiveProduct     { get; set; } // nvarchar(50)
		[Column("competitors_price"),            Nullable          ] public string   CompetitorsPrice       { get; set; } // nvarchar(50)
		[Column("diff_competitor_price"),        Nullable          ] public decimal? DiffCompetitorPrice    { get; set; } // decimal(18, 2)
		[Column("diff_competitor_price_prc"),    Nullable          ] public decimal? DiffCompetitorPricePrc { get; set; } // decimal(18, 2)
		[Column("placement_type"),               Nullable          ] public string   PlacementType          { get; set; } // nvarchar(50)
		[Column("compensation_sp"),              Nullable          ] public string   CompensationSp         { get; set; } // nvarchar(50)
		[Column("specil_placement"),             Nullable          ] public string   SpecilPlacement        { get; set; } // nvarchar(50)
		[Column("manager"),                      Nullable          ] public string   Manager                { get; set; } // nvarchar(50)
		[Column("produckt_category"),            Nullable          ] public string   ProducktCategory       { get; set; } // nvarchar(50)
		[Column("path_photo"),                   Nullable          ] public string   PathPhoto              { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_cells_pages
		/// </summary>
		[Association(ThisKey="PageId", OtherKey="PageId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_cells_pages", BackReferenceName="cells")]
		public Page page { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="otds")]
	public partial class Otd
	{
		[Column("Otd_id"), PrimaryKey,  NotNull] public long   OtdId { get; set; } // bigint
		[Column(),            Nullable         ] public string Name  { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK__users__otd_id__17F790F9_BackReference
		/// </summary>
		[Association(ThisKey="OtdId", OtherKey="OtdId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<User> usersotdid17F790F { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="pages")]
	public partial class Page
	{
		[Column("page_id"), PrimaryKey, NotNull] public long PageId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_cells_pages_BackReference
		/// </summary>
		[Association(ThisKey="PageId", OtherKey="PageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Cell> cells { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="tokens")]
	public partial class Token
	{
		[Column("token_id"), PrimaryKey,  Identity] public long     TokenId { get; set; } // bigint
		[Column("user_id"),  NotNull              ] public long     UserId  { get; set; } // bigint
		[Column("value"),       Nullable          ] public string   Value   { get; set; } // nvarchar(50)
		[Column("created"),  NotNull              ] public DateTime Created { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_tokens_ToTable
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="UserId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_tokens_ToTable", BackReferenceName="tokensToTables")]
		public User ToTable { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="users")]
	public partial class User
	{
		[Column("user_id"),   PrimaryKey,  NotNull] public long   UserId   { get; set; } // bigint
		[Column("name1"),        Nullable         ] public string Name1    { get; set; } // nvarchar(50)
		[Column("name2"),        Nullable         ] public string Name2    { get; set; } // nvarchar(50)
		[Column("name3"),        Nullable         ] public string Name3    { get; set; } // nvarchar(50)
		[Column("login"),                  NotNull] public string Login    { get; set; } // nvarchar(50)
		[Column("otd_id"),       Nullable         ] public long?  OtdId    { get; set; } // bigint
		[Column("access_id"),    Nullable         ] public long?  AccessId { get; set; } // bigint
		[Column("password"),     Nullable         ] public Guid?  Password { get; set; } // uniqueidentifier

		#region Associations

		/// <summary>
		/// FK__users__access_id__18EBB532
		/// </summary>
		[Association(ThisKey="AccessId", OtherKey="AccessId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK__users__access_id__18EBB532", BackReferenceName="usersid18EBB")]
		public Access accessid18EBB { get; set; }

		/// <summary>
		/// FK__users__otd_id__17F790F9
		/// </summary>
		[Association(ThisKey="OtdId", OtherKey="OtdId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK__users__otd_id__17F790F9", BackReferenceName="usersotdid17F790F")]
		public Otd otdid17F790F { get; set; }

		/// <summary>
		/// FK_tokens_ToTable_BackReference
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Token> tokensToTables { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="v_users", IsView=true)]
	public partial class VUsers
	{
		[Column("number"),       Nullable] public long?  Number   { get; set; } // bigint
		[Column("user_id"),   NotNull    ] public long   UserId   { get; set; } // bigint
		[Column("name1"),        Nullable] public string Name1    { get; set; } // nvarchar(50)
		[Column("name2"),        Nullable] public string Name2    { get; set; } // nvarchar(50)
		[Column("name3"),        Nullable] public string Name3    { get; set; } // nvarchar(50)
		[Column("login"),     NotNull    ] public string Login    { get; set; } // nvarchar(50)
		[Column("otd_id"),       Nullable] public long?  OtdId    { get; set; } // bigint
		[Column("access_id"),    Nullable] public long?  AccessId { get; set; } // bigint
		[Column("password"),     Nullable] public Guid?  Password { get; set; } // uniqueidentifier
	}

	public static partial class PapersDBStoredProcedures
	{
		#region SpAlterdiagram

		public static int SpAlterdiagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, int? @version, byte[] @definition)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_alterdiagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32),
				new DataParameter("@version",     @version,     DataType.Int32),
				new DataParameter("@definition",  @definition,  DataType.VarBinary));
		}

		#endregion

		#region SpCreatediagram

		public static int SpCreatediagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, int? @version, byte[] @definition)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_creatediagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32),
				new DataParameter("@version",     @version,     DataType.Int32),
				new DataParameter("@definition",  @definition,  DataType.VarBinary));
		}

		#endregion

		#region SpDropdiagram

		public static int SpDropdiagram(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_dropdiagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		#endregion

		#region SpHelpdiagramdefinition

		public static IEnumerable<SpHelpdiagramdefinitionResult> SpHelpdiagramdefinition(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.QueryProc<SpHelpdiagramdefinitionResult>("[dbo].[sp_helpdiagramdefinition]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		public partial class SpHelpdiagramdefinitionResult
		{
			public int?   version    { get; set; }
			public byte[] definition { get; set; }
		}

		#endregion

		#region SpHelpdiagrams

		public static IEnumerable<SpHelpdiagramsResult> SpHelpdiagrams(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.QueryProc<SpHelpdiagramsResult>("[dbo].[sp_helpdiagrams]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		public partial class SpHelpdiagramsResult
		{
			public string Database { get; set; }
			public string Name     { get; set; }
			public int    ID       { get; set; }
			public string Owner    { get; set; }
			public int    OwnerID  { get; set; }
		}

		#endregion

		#region SpRenamediagram

		public static int SpRenamediagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, string @new_diagramname)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_renamediagram]",
				new DataParameter("@diagramname",     @diagramname,     DataType.NVarChar),
				new DataParameter("@owner_id",        @owner_id,        DataType.Int32),
				new DataParameter("@new_diagramname", @new_diagramname, DataType.NVarChar));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region FnDiagramobjects

		[Sql.Function(Name="dbo.fn_diagramobjects", ServerSideOnly=true)]
		public static int? FnDiagramobjects()
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Access Find(this ITable<Access> table, long AccessId)
		{
			return table.FirstOrDefault(t =>
				t.AccessId == AccessId);
		}

		public static Cell Find(this ITable<Cell> table, long GlobalCellId)
		{
			return table.FirstOrDefault(t =>
				t.GlobalCellId == GlobalCellId);
		}

		public static Otd Find(this ITable<Otd> table, long OtdId)
		{
			return table.FirstOrDefault(t =>
				t.OtdId == OtdId);
		}

		public static Page Find(this ITable<Page> table, long PageId)
		{
			return table.FirstOrDefault(t =>
				t.PageId == PageId);
		}

		public static Token Find(this ITable<Token> table, long TokenId)
		{
			return table.FirstOrDefault(t =>
				t.TokenId == TokenId);
		}

		public static User Find(this ITable<User> table, long UserId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId);
		}
	}
}
